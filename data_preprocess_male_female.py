# -*- coding: utf-8 -*-
"""Data preprocess_male_female.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OuFKpUIXf5LHDB-DH9zIZ5oekjMf4_J1
"""

# Importing libraries and downloading the user data

import pandas as pd
import numpy as np

df = pd.read_csv('LFM-1b_users.txt', delimiter='\t' )
df.shape # Checking the shape of the data

# print the dataframe
df.head(5)

# Calculating the value counts
df['gender'].value_counts()

# Checking for the missing value sum
df['gender'].isna().sum()

# Selecting the country column
df['country']

#Checking misimg data sum in the country column
df['country'].isna().sum()

# Performing data preprocessing(data quality check)
import numpy as np

df = df.replace('n',np.NaN)
print('Number of instances = %d' % (df.shape[0]))
print('Number of attributes = %d' % (df.shape[1]))

print('Number of missing values:')
for col in df.columns:
    print('\t%s: %d' % (col,df[col].isna().sum()))


for col in df.columns:
    print(col,df[col].isna().value_counts())

# Filtering gender column selecting both the male or female values both
data2 = df.loc[(df.gender =='f')|(df.gender =='m')]
data2

# Country column has 5330 missing values which need to be removed
data2['country'].isna().value_counts()

# Removing the missing values by dropping since we can't replace it (categorical)
df3 = data2.dropna()
df3

# Now checking for outliers in the playcount data (numeric value) by plotting box plot
df3[['playcount']].boxplot(figsize=(3,3))

# Calculating the inter-quartile range(IQR)
q1_PC = df3['playcount'].quantile(0.25)
q3_PC = df3['playcount'].quantile(0.75)
iqr_PC = q3_PC - q1_PC
q1_PC,q3_PC,iqr_PC

# Calculating the upper and the lower limits of the IQR
upper_limit_PC = q3_PC + (1.5 * iqr_PC)
lower_limit_PC = q1_PC - (1.5 * iqr_PC)
upper_limit_PC,lower_limit_PC

# Defining and loading the dataframe only within the playcount column IQR
df3.loc[(df3['playcount'] > upper_limit_PC) | (df3['playcount'] < lower_limit_PC)]

# Assigning the dataframe to a variable df_new and printing values of playcount before & after removal of the outliers
df_new = df3.loc[(df3['playcount'] < upper_limit_PC) & (df3['playcount'] > lower_limit_PC)]
print ('Before removing outliers:', len(df3['playcount']))
print ('After removing outliers:', len(df_new['playcount']))
print('Outliers:', len(df3['playcount']) - len(df_new['playcount']))

# Checking again for the outliers
df_new[['playcount']].boxplot(figsize=(3,3))

# Saving the dataFrame to a text (.txt) file with tab-separated values for analysis as 'output_data_new.txt'
output_file = 'output_data_new.txt'
df_new.to_csv(output_file, sep='\t', index=False)

#Loading the df_new
df_new

# Chceking the male and female gender counts
df_new.gender.value_counts()

#  Selecting only male and female from the new dataset
data2 = df.loc[(df.gender =='f')|(df.gender =='m')]

#  Selecting country and gender column from the processed data set
df_demo = df_new.loc[:,['country', 'gender']]
df_demo

# Grouping the data by 'country' and 'gender', and count the occurrences
gender_counts = df_demo.groupby(['country', 'gender']).size().unstack(fill_value=0)

# Printing the counts for each country
print(gender_counts)

# Suming the counts of males and females along the rows to get the total count
gender_counts['sum'] = gender_counts.sum(axis=1)
gender_counts_sorted = gender_counts.sort_values(by='sum', ascending=False)

# Calculating the total sum across all countries
total_sum = gender_counts_sorted['sum'].sum()

# Calculating the percentage for each column 'f', 'm', and 'sum'
gender_counts_sorted['percentage_f'] = (gender_counts_sorted['f'] / total_sum) * 100
gender_counts_sorted['percentage_m'] = (gender_counts_sorted['m'] / total_sum) * 100
gender_counts_sorted['percentage_sum'] = (gender_counts_sorted['sum'] / total_sum) * 100
print(gender_counts_sorted)

#Loading the top 12
gender_counts_sorted.head(12)

# Chceking the sum of the values
total_sum = gender_counts_sorted['sum'].sum()
total_sum

# Selecting the top 11 rows from the sorted DataFrame
top = gender_counts_sorted.head(11)

# Printing the top 11 rows
print(top)

# Importing the library and plotting bar graph
import matplotlib.pyplot as plt

# Creating the bar plot
ax = top[['f', 'm' ]].plot(kind='bar', stacked=True, figsize=(5, 3), color=['red', 'blue'])

# Setting labels and title
plt.xlabel('Country')
plt.ylabel('Count')
plt.title('Male and Female Distribution Across Countries')

# Displaying the plot
plt.legend(title='Gender', loc='upper left', labels=['Female', 'Male'])
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()